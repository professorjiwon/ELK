elk 실행 확인
  http://localhost:9200

kibana 실행
  http://localhost:5601

1. index 만들기
  PUT classes

2. index 만들기
  GET classes

3. index 삭제
DELETE classes

4. 문서 생성
  [표현법] POST/인덱스명/_doc/id 
  POST classes/_doc/1
  {
    "name":"gildong",
    "msg" : "hello"
  }

  -> 확인
  GET classes/_doc/1

  -> id를 넣지않고 생성 : id를 자동생성(문자+숫자)
  POST classes/_doc
  {
    "name":"newName",
    "msg" : "newMsg"
  }

5. 문서에 필드 추가(만약 기존에 있는 필드이면 값만 업데이트)
  [표현법] POST/인덱스명/_update/id
          {
            "doc:{
              키 : 값
            }
          }

  POST classes/_update/1
  {
    "doc":{
      "msg":"안녕"
    }
  }

  POST classes/_update/1
  {
    "doc":{
      "num1": 1
    }
  }

  -> script를 이용한 값 변경
  POST classes/_update/1
  {
    "script": {
      "source": "ctx._source.num1 += params.value",
      "params": {
        "value":3
      }
    }
  }

6. _bulk : 한꺼번에 많은 items를 넣을 때

  POST _bulk
  {"index":{"_index":"itest", "id":"1"}}
  {"msg":"안녕 김이라고 해","name":"kim", "age":20}
  {"index":{"_index":"itest", "id":"2"}}
  {"msg":"나는 이가야","name":"lee", "age":20}
  {"index":{"_index":"itest", "id":"3"}}
  {"msg":"나는 박휘순이야","name":"park", "age":20}

  -> 파일로 index를 만들때
  POST _bulk

* DELETE 주의점 전체가 삭제되지 않도록 주의
  -> 문서에서 id 1번만 삭제
    DELETE itest2/_doc/1

  -> index 전체 삭제
    DELETE itest2

7. _search : 검색
  * url 검색
    GET 인덱스/_search?q=검색키:검색값

    GET itest2/_search?q=name:park
    GET itest2/_search?q=name:park AND age:20

  * 본문 데이터 검색

  7.1. term : 완전일치 검색
    GET basketball/_search
    {
      "query": {
        "term":{
          "points": 30
        }
      }
    }

  7.2. match : 단어가 포함되어 있으면 검색
  GET basketball/_search
  {
    "query" : {
      "match":{
        "team":"states"
      }
    }
  }

   ->  match에서 공백은 or를 의미
    GET basketball/_search
    {
      "query" : {
        "match":{
          "team":"states Jazz"
        }
      }
    }

   ->  match에서 and로 검색 : 공백 중간이나 앞, 뒤에 다른 단어가 와도됨
    GET basketball/_search
    {
      "query":{
        "match":{
          "team": {
            "query":"states Jazz",
            "operator":"and"
          }
        }
      }
    }

  7.3. match_phrase : 제시한 검색어는 정확히 일치. 앞이나 뒤에 다른단어가 와도됨
  GET basketball/_search
  {
    "query":{
      "match_phrase":{
        "team" : "States Warriors"
      }
    }
  }

   -> slop 옵션: 값의 공백사이의 단어가 slop의 갯수 이하의 단어가 들어와도됨
  GET basketball/_search
  {
    "query":{
      "match_phrase":{
        "team" : {
          "query":"States Warriors",
          "slop":1
        }
      }
    }
  }

  문제1. Washington 이 들어가져 있는 모든 문서 검색
  문제2. Golden States 들 중 하나라도 들어있는 문서 검색
  문제3. Golden States 공백안에 1단어가 들어와도 검색
  문제4. Warriors States 가 모두 들어있는 문서 검색

  7.4. query_string : 여러개의 검색 사용가능
  GET basketball/_search
  {
    "query":{
      "query_string":{
        "default_field":"team",
        "query": "(Golden AND Jazz) OR \"Golden Warriors\""
      }
    }
  } 

  7.5. Bool Query : 여러 쿼리를 조합하여 사용가능
          4개의 인자 가지고 있다
      - must : 쿼리가 참인 문서들을 검색
      - must_not : 쿼리가 거짓인 문서들을 검색
      - should : 검색 결과 중 이쿼리에 해당하는 문서들의 score를 높여줌
      - filter : 쿼리가 참인 문서를 검색하지만 score를 계산하지 않음
                must보다 검색 속도가 빠르다

    [사용법]
    GET 인덱스명/_search
    {
      "query":{
        "bool":{
          "must":[
            { 쿼리 }, ...
          ],
          "must_not":[
            { 쿼리 }, ...
          ],
          "should":[
            { 쿼리 }, ...
          ],
          "filter":[
            { 쿼리 }, ...
          ]
        }
      }
    }

    GET basketball/_search
    {
      "query":{
        "bool":{
          "must": [
            {"match": {"team":"Jazz"}},
            {"match_phrase":{"team":"Golden States"}}
          ]
        }
      }
    } 